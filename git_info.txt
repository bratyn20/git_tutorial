git config --global alias.hist "log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short"
git revert HEAD Отмена последнего коммита
git reset --hard v1 сброс ветки до тега v1
git tag -d <nametag> удаление тега
git commit --amend -m "Add an author/email comment" изменение последнего коммита
git checkout -b <имяветки> является шорткатом для git branch <имяветки> за которым идет git checkout <имяветки>. Создание ветки
Просто используйте команду git checkout для переключения между ветками.
git remote - это указатель, который ссылается на другую копию репозитория, обычно расположенную на удаленном сервере.
git remote show origin - посмотреть удалённый репозиторий чья копия была сделана
git branch - список веток
git branch -a список веток + ветки оригинала

git hist Посмотреть ветки и подробну инфу
<--! git config --global alias.hist "log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short" !-->

github
git clone <url> создать копию на локальной машине
git push толкнуть изменения на удалённый репозиторий
git push origin <new_name_branch> добавить ветку
git pull origin <name_branch> подтянуть изменения ветки
git pull --rebase origin <name_branch> подтянуть изменения и наш коммит поставить поверх слитого origin

Выводом является то, что команда «git fetch» будет извлекать новые коммиты из удаленного репозитория, 
но не будет сливать их с вашими наработками в локальных ветках.
git pull Сливает именения в ветку в мастер напрямую. Аналог git getch, после git merge origin/master

git merge master слить действующую ветку в master

git clone <old_name> <new_name> Колнирование репозитория <old_name> название папки где хранится репозиторий

*Команды в Git Bash консоли
clear — Очистить консоль

*Навигация 
pwd — Показать текущий каталог
ls - Показать файлы в данной папке, кроме скрытых
ls -f — Показать файлы в данной папке, включая и скрытые
cd c:/ — Перейти в конкретный каталог
cd - — Вернуться назад
cd .. — Выйти на 1 уровень вверх
cd ../.. — Выйти на 2 уровня вверх

*Создание каталогов
mkdir — Создать папку
cd !$ — Перейти в только что созданную папку
mkdir -p {app1,app2} — Создать сразу несколько папок
mkdir -p app/{css,js} — Создать сразу несколько вложенных папок

*Создание файлов
touch index.html — Создать файл index.html
touch app/{css/main.css,js/main.js,index.html} — Создать сразу несколько файлов, никаких лишних пробелов быть не должно

*Удаление файлов
touch — позволяет создавать файлы
rm test — Удалить пустую папку test
rm -r test — Удалить папку test с файлами внутри неё

*Перемещение файлов
mv app1/*.* app2 — Переместить все файлы из папки app1 в папку app2